import requests
import json
from datetime import datetime
from collections import deque
import pymysql
import json
from flask import Flask, request

app = Flask(__name__)

LINE_ACCESS_TOKEN = 
GEMINI_API_KEY = 



class User:
    def __init__(self, user_id, mode_status, historical_data=None, qa_status=False, qa_data=None, chat_history=None):
        self.id = user_id
        self.mode_status = mode_status
        self.historical_data = historical_data if historical_data is not None else {}
        self.qa_status = qa_status
        self.qa_data = qa_data if qa_data is not None else {}
        self.chat_history = deque(chat_history if chat_history is not None else [], maxlen=20)

    def __repr__(self):
        return f"User(id={self.id}, mode_status={self.mode_status}, historical_data={self.historical_data}, qa_status={self.qa_status}, qa_data={self.qa_data})"

    def get_summary(self):
        summary = f""
        historical_data_str = " | ".join([f"{key}: {value}" for key, value in self.historical_data.items()])
        summary += f"historical_data: {historical_data_str}\n"
        if self.qa_data:
            qa_data_str = " | ".join([f"{key}: {value}" for key, value in self.qa_data.items()])
            summary += f"qa_data: {qa_data_str}\n"
        else:
            summary += "qa_data: ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n"
        return summary

    def get_historical_data(self):
        summary = f"User ID: {self.id}\n"
        historical_data_str = " | ".join([f"{key}: {value}" for key, value in self.historical_data.items()])
        summary += f"historical_data: {historical_data_str}\n"
        return summary

    def add_chat_history(self, user_message, ai_response):
        self.chat_history.append((user_message, ai_response))

    def get_chat_history(self):
        history_str = "\n".join(
            [f"User: {user_msg}\nAI: {ai_msg}" for user_msg, ai_msg in self.chat_history]
        )
        return f"Chat History (last 20):\n{history_str}" if history_str else "No chat history available."

    def save_to_db(self):
        try:
            conn = pymysql.connect(
                host="",
                user="",
                password="",
                database="",
                charset="",
                cursorclass=pymysql.cursors.DictCursor
            )
            cursor = conn.cursor()
            
            sql = """
                INSERT INTO users (id, mode_status, historical_data, qa_status, qa_data, chat_history)
                VALUES (%s, %s, %s, %s, %s, %s)
                ON DUPLICATE KEY UPDATE
                mode_status=VALUES(mode_status),
                historical_data=VALUES(historical_data),
                qa_status=VALUES(qa_status),
                qa_data=VALUES(qa_data),
                chat_history=VALUES(chat_history)
            """
            
            values = (
                self.id,
                self.mode_status,
                json.dumps(self.historical_data, ensure_ascii=False),
                self.qa_status,
                json.dumps(self.qa_data, ensure_ascii=False),
                json.dumps(list(self.chat_history), ensure_ascii=False)
            )
            
            cursor.execute(sql, values)
            conn.commit()
        
        except Exception as e:
            print(f"ERROR in save_to_db(): {str(e)}")
        
        finally:
            if cursor:
                cursor.close()
            if conn:
                conn.close()


    @staticmethod
    def load_from_db(user_id):
        try:
            conn = pymysql.connect(
                host="",
                user="",
                password="",
                database="",
                charset="",
                cursorclass=pymysql.cursors.DictCursor
            )
            cursor = conn.cursor()

            sql = "SELECT id, mode_status, historical_data, qa_status, qa_data, chat_history FROM users WHERE id = %s"
            cursor.execute(sql, (user_id,))
            row = cursor.fetchone()

            if row is None:
                print(f"‚ö†Ô∏è User ID {user_id} ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô Database, ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà...")
                return None

            print(f"Loaded User {user_id}: {row}")

            return User(
                user_id=row["id"],
                mode_status=row["mode_status"],
                historical_data=json.loads(row["historical_data"]) if row["historical_data"] else {},
                qa_status=row["qa_status"],
                qa_data=json.loads(row["qa_data"]) if row["qa_data"] else {},
                chat_history=deque(json.loads(row["chat_history"]) if row["chat_history"] else [], maxlen=20)
            )

        except Exception as e:
            print(f"ERROR in load_from_db(): {str(e)}")
            return None

        finally:
            if cursor:
                cursor.close()
            if conn:
                conn.close()


def gemini_api(text):
    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={GEMINI_API_KEY}"

    payload = {
        "contents": [{
            "parts": [{"text": text}]
        }]
    }
    headers = {
        "Content-Type": "application/json"
    }

    response = requests.post(url, headers=headers, data=json.dumps(payload))

    if response.status_code == 200:
        result = response.json()
        text_response = result.get("candidates", [])[0].get("content", {}).get("parts", [])[0].get("text", "")
        return text_response
    else:
        return f"Error: {response.status_code}, {response.text}"

def reply_message(reply_token, text):
    url = "https://api.line.me/v2/bot/message/reply"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {LINE_ACCESS_TOKEN}"
    }
    
    if len(text) > 5000:
        text = text[:4997] + "..."

    data = {
        "replyToken": reply_token,
        "messages": [{"type": "text", "text": text}]
    }
    
    try:
        response = requests.post(url, headers=headers, json=data)
        response.raise_for_status()
        print("Reply Status:", response.status_code, response.text)
    except requests.exceptions.RequestException as e:
        print(f"LINE API Error: {e}")



@app.route("/webhook", methods=["POST"])
def webhook():
    try:
        data = request.get_json()
        print("Received:", json.dumps(data, indent=4))

        for event in data.get("events", []):
            if event["type"] == "message":
                user_id = event["source"]["userId"]
                reply_token = event["replyToken"]

                if event["message"]["type"] == "text":
                    user_text = event["message"]["text"]
                    response = lobby(user_id=user_id, message=user_text)
                else:
                    response = "‚ö†Ô∏è ‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ MyCortex ‡∏¢‡∏±‡∏á‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÅ‡∏Ñ‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ö‡∏ö Text"

                reply_message(reply_token, response)

        return "OK", 200

    except OSError as e:
        print(f"üö® OSError (client disconnected?): {e}")
        return "Error", 500
    except Exception as e:
        print(f"üö® Unexpected error: {e}")
        return "Error", 500

def update_historical_data(user, message):
    if not user:
        return "User not found"

    check_input = f"""
    ‡πÄ‡∏£‡∏≤‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ AI ‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û
    ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: "{message}"
    ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ : "{user.get_historical_data()}"
    ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    ‡πÄ‡∏ä‡πà‡∏ô ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏ô ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢ ‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏≠‡∏∑‡πà‡∏ô ‡πÜ
    ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡πâ‡∏ô ‡πÜ
    ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏Ñ‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö "NO"
    """

    response = gemini_api(check_input).strip()

    if response != "NO":
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')  # ‡πÄ‡∏û‡∏¥‡πà‡∏° timestamp ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        user.historical_data[timestamp] = response  # ‡πÉ‡∏ä‡πâ timestamp ‡πÄ‡∏õ‡πá‡∏ô key
        return f"Updated historical data for {user.id}: {response}"

    return "NO"


def diagnose_disease(user, message):
    if "question_0" not in user.qa_data:
        user.qa_data["question_0"] = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:"
        user.save_to_db()
        return "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"
    last_question_index = len(user.qa_data) // 2
    user.qa_data[f"answer_{last_question_index - 1}"] = message
    user.save_to_db()

    formatted_input = f"""
        ‡πÄ‡∏£‡∏≤‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏´‡∏°‡∏≠
        ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏±‡∏Å‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• : {user.get_summary()}
        
        ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤ ‡∏Å‡∏±‡∏ö AI :
        {user.get_chat_history()}
        
        ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ‡∏≠‡∏∞‡πÑ‡∏£ ‡∏Ñ‡∏ß‡∏£‡∏Å‡∏¥‡∏ô‡∏¢‡∏≤‡∏≠‡∏∞‡πÑ‡∏£ ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏≠‡∏ö‡∏ï‡∏≠‡∏ö‡∏Ç‡πâ‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏°‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô 3 ‡πÅ‡∏ö‡∏ö ‡∏´‡πâ‡∏≤‡∏°‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡∏≠‡∏¢‡πà‡∏≤‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ï‡∏¥‡∏° ""

        ‡πÇ‡∏£‡∏Ñ‡∏ö‡∏≠‡∏Å‡πÅ‡∏Ñ‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏Ñ ‡∏¢‡∏≤ (‡∏ö‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠ ‡∏Ç‡∏ô‡∏≤‡∏î ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô) ‡∏£‡∏∞‡∏ö‡∏∏‡∏°‡∏≤‡πÉ‡∏´‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ ‡πÄ‡∏ä‡πà‡∏ô ‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡∏°‡∏≤‡∏Å‡πÜ ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏†‡∏≤‡∏ß‡∏∞‡∏ä‡πá‡∏≠‡∏Å ‡∏´‡πâ‡∏≤‡∏°‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ‡∏Ç‡∏≤‡∏î‡∏ô‡πâ‡∏≥ ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏≠‡∏≠‡∏Å‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏Ñ‡∏ß‡∏£‡∏£‡∏µ‡∏ö‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        return
        ‡πÇ‡∏£‡∏Ñ : ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
        ‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö : ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
        ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ : ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö

        ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏â‡∏±‡∏¢‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ ‡πÉ‡∏´‡πâ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ó‡∏µ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
        ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏≤‡∏°‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ñ‡∏≤‡∏°‡∏ï‡∏≠‡∏ö ‡∏´‡∏£‡∏∑‡∏≠‡∏ã‡∏±‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡πÄ‡∏ä‡πà‡∏ô ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ‡∏≠‡∏≤‡∏à‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏¢‡∏±‡∏á‡πÑ‡∏á‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏•‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏ü‡∏±‡∏á‡∏´‡∏ô‡πà‡∏≠‡∏¢ ‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏°‡∏≠
        return

        ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏õ‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ó‡∏µ‡πà‡πÇ‡∏£‡∏Ñ‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏≤‡∏Å‡πÜ‡∏≠‡∏¢‡πà‡∏≤‡∏ï‡∏≠‡∏ö ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏£‡πâ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå
        return
        ‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ : ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
        ‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö : ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
        ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ : ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
        ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡∏Ñ‡∏ß‡∏£‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏â‡∏±‡∏¢

        """
    response = gemini_api(formatted_input).strip()
    if all(keyword in response for keyword in ["‡πÇ‡∏£‡∏Ñ :", "‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö :", "‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ :"]):
        user.qa_data.clear()
        user.mode_status = "health_chat"
        user.add_chat_history(user_message="‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡∏à‡∏≤‡∏Å AI", ai_response=response)
        user.save_to_db()
        return f"ü©∫ MyCortex ‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!\n{response}"
    question_index = len(user.qa_data) // 2
    user.qa_data[f"question_{question_index}"] = response
    user.add_chat_history(user_message=message, ai_response=response)
    user.save_to_db()
    return response

def health_chat(user, message):
    update_historical_data(user=user, message=message)
    prompt = f"""
    ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô AI ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏î‡πâ‡∏≤‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û
    ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:
    {user.get_historical_data()}

    ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤:
    {user.get_chat_history()}

    ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:
    {message}

    ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û
    """
    ai_response = gemini_api(prompt).strip()
    user.add_chat_history(user_message=message, ai_response=ai_response)
    user.save_to_db()
    return ai_response

questions = {
    "age": "üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà MyCortex! üß†\n‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° 13 ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô \n13.‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏£?",
    "gender": "12.‡πÄ‡∏û‡∏®‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?",
    "weight": "11.‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°)?",
    "height": "10.‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡πÄ‡∏ã‡∏ô‡∏ï‡∏¥‡πÄ‡∏°‡∏ï‡∏£)?",
    "blood_type": "9.‡∏Å‡∏£‡∏∏‡πä‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?",
    "allergies": "8.‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏û‡πâ‡∏¢‡∏≤ ‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏≤‡∏£‡πÄ‡∏Ñ‡∏°‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
    "chronic_diseases": "7.‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏™‡∏π‡∏á ‡∏´‡∏±‡∏ß‡πÉ‡∏à ‡πÑ‡∏ï ‡∏Ø‡∏•‡∏Ø)",
    "medical_history": "6.‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ñ‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Ñ‡∏¢‡∏ú‡πà‡∏≤‡∏ï‡∏±‡∏î‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á?",
    "vaccination_history": "5.‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ñ‡∏¢‡∏â‡∏µ‡∏î‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á?",
    "family_diseases": "4.‡∏°‡∏µ‡πÇ‡∏£‡∏Ñ‡∏ó‡∏≤‡∏á‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡∏Å‡∏£‡∏£‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏£‡∏Ñ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢‡πÉ‡∏ô‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
    "medications": "3.‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏¢‡∏≤‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏≤‡πÉ‡∏î‡πÜ ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
    "smoking": "2.‡∏Ñ‡∏∏‡∏ì‡∏™‡∏π‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà",
    "alcohol": "1.‡∏Ñ‡∏∏‡∏ì‡∏î‡∏∑‡πà‡∏°‡πÅ‡∏≠‡∏•‡∏Å‡∏≠‡∏Æ‡∏≠‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà"
}

def process_answer(user, message):
    answered_questions = list(user.historical_data.keys())
    question_keys = list(questions.keys())
    next_question_index = len(answered_questions)

    if next_question_index > 0:
        prev_question_key = question_keys[next_question_index - 1]
        user.historical_data[prev_question_key] = message
        user.save_to_db()

    if next_question_index < len(questions):
        next_question_key = question_keys[next_question_index]
        next_question_text = questions[next_question_key]
        user.historical_data[next_question_key] = ""
        user.save_to_db()
        return next_question_text

    else:
        user.mode_status = "health_chat"
        user.save_to_db()
        return f"üéâ ‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß! ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á MyCortex ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ üéâ"

def lobby(user_id, message):
    user = User.load_from_db(user_id)
    if not user:
        user = User(user_id, "active")
        return process_answer(user, message)

    answered_questions = {k: v for k, v in user.historical_data.items() if v != ""}

    if len(answered_questions) < len(questions):
        return process_answer(user, message)
    
    if message in ["diagnose_disease"]:
        user.mode_status = message
        user.qa_data.clear()
        user.save_to_db()
        return diagnose_disease(user, message)

    if message in ["health_chat"]:
        user.mode_status = message
        user.save_to_db()
        return f"üîÑ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô {message} ‡πÅ‡∏•‡πâ‡∏ß! ‡πÇ‡∏õ‡∏£‡∏î‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"

    if user.mode_status == "diagnose_disease":
        return diagnose_disease(user, message)
    elif user.mode_status == "health_chat":
        return health_chat(user, message)
    else:
        return "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô ‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏°‡∏û‡πå 'diagnose_disease' ‡∏´‡∏£‡∏∑‡∏≠ 'health_chat'"

if __name__ == "__main__":
    app.run(port=5000)